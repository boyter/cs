{
  "ABAP": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "abap"
    ],
    "line_comment": [
      "*",
      "\\\""
    ],
    "multi_line": [],
    "quotes": []
  },
  "ASP": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "asa",
      "asp"
    ],
    "line_comment": [
      "'",
      "REM"
    ],
    "multi_line": [],
    "quotes": []
  },
  "ASP.NET": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "asax",
      "ascx",
      "asmx",
      "aspx",
      "master",
      "sitemap",
      "webinfo"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ],
      [
        "<%--",
        "-->"
      ]
    ],
    "quotes": []
  },
  "ATS": {
    "complexitychecks": [
      "if ",
      "if(",
      " then ",
      " else ",
      "case+ ",
      "ifcase",
      "let ",
      "and "
    ],
    "extensions": [
      "dats",
      "sats",
      "ats",
      "hats"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ],
      [
        "(*",
        "*)"
      ],
      [
        "////",
        "THISSHOULDNEVERAPPEARWEHOPE"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "AWK": {
    "complexitychecks": [],
    "extensions": [
      "awk"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ],
    "shebangs": [
      "awk",
      "gawk",
      "mawk"
    ]
  },
  "ActionScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "as"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Ada": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ada",
      "adb",
      "ads",
      "pad"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Agda": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "agda"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "quotes": []
  },
  "Alchemist": {
    "complexitychecks": [
      "+",
      "->",
      "!"
    ],
    "extensions": [
      "crn"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Alex": {
    "complexitychecks": [],
    "extensions": [
      "x"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Alloy": {
    "complexitychecks": [
      "implies ",
      "else ",
      "for ",
      "|| ",
      "&& ",
      "!= ",
      "== ",
      "<= ",
      ">= "
    ],
    "extensions": [
      "als"
    ],
    "line_comment": [
      "//",
      "--"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": []
  },
  "Android Interface Definition Language": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "aidl"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/**",
        "*/"
      ],
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Arvo": {
    "complexitychecks": [],
    "extensions": [
      "avdl",
      "avpr",
      "avsc"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "AsciiDoc": {
    "complexitychecks": [],
    "extensions": [
      "adoc"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Assembly": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "s",
      "asm"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "AutoHotKey": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ahk"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": []
  },
  "Autoconf": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "in"
    ],
    "line_comment": [
      "#",
      "dnl"
    ],
    "multi_line": [],
    "quotes": []
  },
  "BASH": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "bash",
      "bash_login",
      "bash_logout",
      "bash_profile",
      "bashrc"
    ],
    "filenames": [
      ".bash_login",
      ".bash_logout",
      ".bash_profile",
      ".bashrc"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "bash"
    ]
  },
  "Basic": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "elseif ",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "bas"
    ],
    "line_comment": [
      "'"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "Batch": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "bat",
      "btm",
      "cmd"
    ],
    "line_comment": [
      "REM",
      "::"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Bazel": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "bzl",
      "build.bazel",
      "build",
      "workspace"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Bitbake": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "bb",
      "bbappend",
      "bbclass"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Bitbucket Pipeline": {
    "complexitychecks": [],
    "extensions": [
      "bitbucket-pipelines.yml"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Boo": {
    "complexitychecks": [
      "for ",
      "if ",
      "elif ",
      "unless ",
      " and ",
      "for ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "boo"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\"\"\"",
        "start": "\"\"\""
      }
    ]
  },
  "Bosque": {
    "complexitychecks": [
      "if ",
      "if(",
      "switch ",
      "match ",
      "case ",
      "| ",
      "|| ",
      "& ",
      "&& ",
      "!= ",
      "!== ",
      "== ",
      "=== "
    ],
    "extensions": [
      "bsq"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Brainfuck": {
    "complexitychecks": [
      "[",
      "]",
      "<",
      ">",
      "+",
      "-",
      ".",
      ","
    ],
    "extensions": [
      "bf"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "BuildStream": {
    "complexitychecks": [],
    "extensions": [
      "bst"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "C": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "c",
      "ec",
      "pgc"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "C Header": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "h"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "C Shell": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "csh"
    ],
    "filenames": [
      ".cshrc"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [],
    "shebangs": [
      "csh",
      "tcsh"
    ]
  },
  "C#": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cs"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "ignoreEscape": true,
        "start": "@\""
      },
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "C++": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cc",
      "cpp",
      "cxx",
      "c++",
      "pcc"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "C++ Header": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "hh",
      "hpp",
      "hxx",
      "inl",
      "ipp"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "CMake": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cmake",
      "cmakelists.txt"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "COBOL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cob",
      "cbl",
      "ccp",
      "cobol",
      "cpy"
    ],
    "line_comment": [
      "*"
    ],
    "multi_line": [],
    "quotes": []
  },
  "CSS": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "css"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "CSV": {
    "complexitychecks": [],
    "extensions": [
      "csv"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Cabal": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cabal"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "quotes": []
  },
  "Cargo Lock": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cargo.lock"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      },
      {
        "end": "'''",
        "start": "'''"
      }
    ]
  },
  "Cassius": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cassius"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Ceylon": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ceylon"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Clojure": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "clj"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": []
  },
  "ClojureScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cljs"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Closure Template": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== ",
      ">= ",
      "<= ",
      "?: ",
      "? : "
    ],
    "extensions": [
      "soy"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/**",
        "*/"
      ],
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "CoffeeScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "coffee"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "###",
        "###"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Cogent": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cogent"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [],
    "quotes": []
  },
  "ColdFusion": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cfm"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!---",
        "--->"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "ColdFusion CFScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cfc"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Coq": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "v"
    ],
    "keywords": [
      "Require",
      "Hypothesis",
      "Inductive",
      "Remark",
      "Lemma",
      "Proof",
      "Definition",
      "Theorem",
      "Class",
      "Instance",
      "Module",
      "Context",
      "Section",
      "Notation",
      "End",
      "Fixpoint",
      "From Coq"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Creole": {
    "complexitychecks": [],
    "extensions": [
      "creole"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Crystal": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cr"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Cython": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "and ",
      "or ",
      "not ",
      "in "
    ],
    "extensions": [
      "pyx",
      "pxi",
      "pxd"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      },
      {
        "end": "'''",
        "start": "'''"
      }
    ]
  },
  "D": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "d"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ],
      [
        "/+",
        "+/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "rdmd"
    ]
  },
  "Dart": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "dart"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Device Tree": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "dts",
      "dtsi"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Dhall": {
    "complexitychecks": [],
    "extensions": [
      "dhall"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Docker ignore": {
    "complexitychecks": [],
    "extensions": [],
    "filenames": [
      ".dockerignore"
    ],
    "line_comment": [
      "#",
      "//"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Dockerfile": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "dockerfile"
    ],
    "line_comment": [
      "#"
    ],
    "filenames": [
      "dockerfile"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Document Type Definition": {
    "complexitychecks": [],
    "extensions": [
      "dtd"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Elixir": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ex",
      "exs"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      },
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'''",
        "start": "'''"
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Elm": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "elm"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "quotes": []
  },
  "Emacs Dev Env": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ede"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Emacs Lisp": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "el"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Erlang": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "erl",
      "hrl"
    ],
    "line_comment": [
      "%"
    ],
    "multi_line": [],
    "quotes": [],
    "shebangs": [
      "escript"
    ]
  },
  "Expect": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "exp"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Extensible Stylesheet Language Transformations": {
    "complexitychecks": [],
    "extensions": [
      "xslt",
      "xsl"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "F#": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "fs",
      "fsi",
      "fsx",
      "fsscript"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": []
  },
  "F*": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "fst"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "FIDL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "fidl"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "FORTRAN Legacy": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "f",
      "for",
      "ftn",
      "f77",
      "pfo"
    ],
    "line_comment": [
      "c",
      "C",
      "!",
      "*"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "FORTRAN Modern": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "f03",
      "f08",
      "f90",
      "f95"
    ],
    "line_comment": [
      "!"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "Fish": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "fish"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "fish"
    ]
  },
  "Flow9": {
    "complexitychecks": [
      "if ",
      "if(",
      "else ",
      "else{",
      "fori ",
      "fori(",
      "switch ",
      "switch(",
      "fold ",
      "fold(",
      "|| ",
      "&& ",
      "!= ",
      "== ",
      "|> "
    ],
    "extensions": [
      "flow"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Forth": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "4th",
      "forth",
      "fr",
      "frt",
      "fth",
      "f83",
      "fb",
      "fpm",
      "e4",
      "rx",
      "ft"
    ],
    "line_comment": [
      "\\\\"
    ],
    "multi_line": [
      [
        "( ",
        ")"
      ]
    ],
    "quotes": []
  },
  "Fragment Shader File": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "fsh"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Freemarker Template": {
    "complexitychecks": [
      "<#list ",
      "<#assign ",
      "<#if ",
      "<#elseif ",
      "<#else>",
      "<#else> ",
      "<#switch  ",
      "<#case ",
      "<#default>",
      "<#default> ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ftl"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<#--",
        "-->"
      ]
    ],
    "quotes": []
  },
  "Futhark": {
    "complexitychecks": [
      "if ",
      "else ",
      "then ",
      "for ",
      "loop ",
      "while ",
      "|| ",
      "&& ",
      "!= ",
      ">= ",
      "<= "
    ],
    "extensions": [
      "fut"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [],
    "quotes": []
  },
  "GDScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "gd"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      }
    ]
  },
  "GLSL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vert",
      "tesc",
      "tese",
      "geom",
      "frag",
      "comp"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "GN": {
    "complexitychecks": [
      "if(",
      "if (",
      "else if(",
      "else if (",
      "else(",
      "else (",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "gn",
      "gni"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Game Maker Language": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "repeat ",
      "repeat(",
      "|| ",
      "or ",
      "&& ",
      "and ",
      "!= ",
      "== "
    ],
    "extensions": [
      "gml"
    ],
    "line_comment": [
      "//",
      "///"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Game Maker Project": {
    "complexitychecks": [],
    "extensions": [
      "yyp"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Gemfile": {
    "complexitychecks": [],
    "extensions": [],
    "filenames": [
      "gemfile"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Gherkin Specification": {
    "complexitychecks": [
      "given",
      "when",
      "then",
      "and"
    ],
    "extensions": [
      "feature"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Go": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "go"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "`",
        "ignoreEscape": true,
        "start": "`"
      }
    ]
  },
  "Go Template": {
    "complexitychecks": [
      "{{if ",
      "{{ if ",
      "{{else",
      "{{ else",
      "{{range ",
      "{{ range ",
      "{{with",
      "{{ with"
    ],
    "extensions": [
      "tmpl"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "{{/*",
        "*/}}"
      ]
    ],
    "quotes": []
  },
  "Gradle": {
    "complexitychecks": [],
    "extensions": [
      "gradle"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Groovy": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "groovy",
      "grt",
      "gtpl",
      "gvy"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "HEX": {
    "complexitychecks": [],
    "extensions": [
      "hex"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "HTML": {
    "extensions": [
      "html",
      "htm"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Hamlet": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "hamlet"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Handlebars": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "hbs",
      "handlebars"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ],
      [
        "{{!",
        "}}"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Happy": {
    "complexitychecks": [],
    "extensions": [
      "y",
      "ly"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Haskell": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "hs"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "quotes": []
  },
  "Haxe": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "hx"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "IDL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "idl",
      "webidl",
      "widl"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Idris": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "idr",
      "lidr"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      }
    ]
  },
  "Intel HEX": {
    "complexitychecks": [],
    "extensions": [
      "ihex"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Isabelle": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "thy"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{*",
        "*}"
      ],
      [
        "(*",
        "*)"
      ],
      [
        "‹",
        "›"
      ],
      [
        "\\\\<open>",
        "\\\\<close>"
      ]
    ],
    "quotes": [
      {
        "end": "''",
        "start": "''"
      }
    ]
  },
  "JAI": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "jai"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "JSON": {
    "complexitychecks": [],
    "extensions": [
      "json"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "JSONL": {
    "complexitychecks": [],
    "extensions": [
      "jsonl"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "JSX": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "jsx"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Jade": {
    "complexitychecks": [
      "if ",
      "else if ",
      "unless "
    ],
    "extensions": [
      "jade"
    ],
    "line_comment": [
      "//-"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Janet": {
    "complexitychecks": [
      "(if ",
      "(for ",
      "(for ",
      "(cond ",
      "(switch ",
      "(when ",
      "(while ",
      "(loop ",
      "(case "
    ],
    "extensions": [
      "janet"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "nestedmultiline": false,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "``",
        "start": "``"
      },
      {
        "end": "\"",
        "start": "@\""
      }
    ]
  },
  "Java": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "java"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "JavaScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "js",
      "mjs"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ],
    "shebangs": [
      "node"
    ]
  },
  "JavaServer Pages": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "jsp"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Jenkins Buildfile": {
    "complexitychecks": [],
    "extensions": [
      "jenkinsfile"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Jinja": {
    "complexitychecks": [
      "{% for ",
      "{%- for ",
      "{% if ",
      "{%- if ",
      "{% else ",
      "{%- else ",
      "{% elif ",
      "{% macro ",
      "{%- macro ",
      "{% call ",
      "{%- call ",
      "{% filter ",
      "{%- filter ",
      "{% set ",
      "{% include ",
      "{% from ",
      "{% extends ",
      "{% with "
    ],
    "extensions": [
      "jinja",
      "j2",
      "jinja2"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "{#",
        "#}"
      ]
    ],
    "quotes": []
  },
  "Julia": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "jl"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "#=",
        "=#"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      }
    ]
  },
  "Julius": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "julius"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Jupyter": {
    "complexitychecks": [],
    "extensions": [
      "ipynb",
      "jpynb"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Just": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "justfile"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "Korn Shell": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ksh"
    ],
    "filenames": [
      ".kshrc"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "ksh"
    ]
  },
  "Kotlin": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "kt",
      "kts"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "LD Script": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "lds"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "LESS": {
    "complexitychecks": [],
    "extensions": [
      "less"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "LEX": {
    "complexitychecks": [],
    "extensions": [
      "l"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": []
  },
  "LOLCODE": {
    "complexitychecks": [
      "AWSUM THX ",
      "O NOES ",
      "PLZ OPEN FILE ",
      "IM IN YR ",
      "O RLY?",
      "O RLY? ",
      "WTF?",
      "WTF? "
    ],
    "extensions": [
      "lol",
      "lols"
    ],
    "line_comment": [
      "BTW"
    ],
    "multi_line": [
      [
        "OBTW",
        "TLDR"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "LaTeX": {
    "complexitychecks": [],
    "extensions": [
      "tex"
    ],
    "line_comment": [
      "%"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Lean": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "lean",
      "hlean"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "/-",
        "-/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": []
  },
  "License": {
    "complexitychecks": [],
    "extensions": [],
    "filenames": [
      "license",
      "licence",
      "copying",
      "copying3",
      "unlicense",
      "unlicence",
      "license-mit",
      "licence-mit",
      "copyright"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Lisp": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "lisp",
      "lsp"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [
      [
        "#|",
        "|#"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [],
    "shebangs": [
      "sbcl"
    ]
  },
  "Lua": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "lua"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "--[[",
        "]]"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "lua"
    ]
  },
  "Lucius": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "lucius"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Luna": {
    "complexitychecks": [],
    "extensions": [
      "luna"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "MQL Header": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mqh"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "MQL4": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mq4"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "MQL5": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mq5"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "MSBuild": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "csproj",
      "vbproj",
      "fsproj",
      "props",
      "targets"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "MUMPS": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mps"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Macromedia eXtensible Markup Language": {
    "complexitychecks": [],
    "extensions": [
      "mxml"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Madlang": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mad"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "{#",
        "#}"
      ]
    ],
    "quotes": []
  },
  "Makefile": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "makefile",
      "mak",
      "mk",
      "bp"
    ],
    "filenames": [
      "makefile"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Mako": {
    "complexitychecks": [
      "% for ",
      "% if ",
      "% else ",
      "% elif ",
      "<% include ",
      "<%def ",
      "<%page ",
      "<%def ",
      "<%block ",
      "<%namespace ",
      "<%inherit "
    ],
    "extensions": [
      "mako",
      "mao"
    ],
    "line_comment": [
      "##"
    ],
    "multi_line": [
      [
        "<%doc>",
        "</%doc>"
      ]
    ],
    "quotes": []
  },
  "Markdown": {
    "complexitychecks": [],
    "extensions": [
      "md",
      "markdown"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Meson": {
    "complexitychecks": [
      "foreach ",
      "if ",
      "elif ",
      "unless ",
      "and ",
      "or ",
      "else "
    ],
    "extensions": [
      "meson.build",
      "meson_options.txt"
    ],
    "line_comment": [
      "#"
    ],
    "quotes": [
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "'''",
        "start": "'''"
      }
    ]
  },
  "Modula3": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "m3",
      "mg",
      "ig",
      "i3"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Module-Definition": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "def"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Monkey C": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mc"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Mustache": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mustache"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "{{!",
        "}}"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Nim": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "nim"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      }
    ]
  },
  "Nix": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "nix"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "OCaml": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ml",
      "mli"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Objective C": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "m"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Objective C++": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "mm"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Opalang": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "opa"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Org": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "org"
    ],
    "line_comment": [
      "# "
    ],
    "multi_line": [],
    "quotes": []
  },
  "Oz": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "oz"
    ],
    "line_comment": [
      "%"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "PHP": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "php"
    ],
    "line_comment": [
      "#",
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "php",
      "php5"
    ]
  },
  "PKGBUILD": {
    "complexitychecks": [],
    "extensions": [
      "pkgbuild"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "PL/SQL": {
    "complexitychecks": [
      "and ",
      "and(",
      "else ",
      "else(",
      "elseif ",
      "elseif(",
      "if ",
      "if(",
      "loop ",
      "not ",
      "not(",
      "or ",
      "or(",
      "<> ",
      "<>(",
      "= ",
      "=("
    ],
    "extensions": [
      "fnc",
      "pkb",
      "pks",
      "prc",
      "trg",
      "vw"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "PSL Assertion": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "psl"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Pascal": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "pas"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "{",
        "}"
      ],
      [
        "(*",
        "*)"
      ],
      [
        "{",
        "*)"
      ],
      [
        "(*",
        "}"
      ]
    ],
    "quotes": [
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Patch": {
    "complexitychecks": [],
    "extensions": [
      "patch"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Perl": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "pl",
      "pm"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "=pod",
        "=cut"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "perl",
      "perl5",
      "perl6"
    ]
  },
  "Plain Text": {
    "complexitychecks": [],
    "extensions": [
      "text",
      "txt"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Polly": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "polly"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Pony": {
    "complexitychecks": [
      "for ",
      "if ",
      "match ",
      "repeat",
      "while ",
      "else ",
      "elseif ",
      "| ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "pony"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      }
    ]
  },
  "Powershell": {
    "complexitychecks": [
      "while ",
      "while(",
      "until ",
      "until(",
      "for ",
      "for(",
      "foreach ",
      "foreach(",
      "if ",
      "elseif ",
      "else ",
      "switch",
      "switch(",
      "-gt",
      "-lt",
      "-eq",
      "-ne",
      "-ge",
      "-le",
      "-in",
      "-notin",
      "-contains",
      "-notcontains"
    ],
    "extensions": [
      "ps1",
      "psm1"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "<#",
        "#>"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Processing": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "pde"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Prolog": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "p",
      "pro"
    ],
    "line_comment": [
      "%"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Properties File": {
    "complexitychecks": [],
    "extensions": [
      "properties"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Protocol Buffers": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "proto"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Puppet": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "pp"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "=begin",
        "=end"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "PureScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "purs"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "{-",
        "-}"
      ]
    ],
    "quotes": []
  },
  "Python": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "and ",
      "or ",
      "not ",
      "in "
    ],
    "extensions": [
      "py"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "docString": true,
        "end": "\"\"\"",
        "start": "\"\"\""
      },
      {
        "docString": true,
        "end": "'''",
        "start": "'''"
      }
    ],
    "shebangs": [
      "python",
      "python2",
      "python3"
    ]
  },
  "Q#": {
    "complexitychecks": [
      "for ",
      "for(",
      "repeat ",
      "repeat{",
      "until (",
      "until(",
      "if ",
      "if(",
      "elif ",
      "elif{",
      "else ",
      "else{",
      "||| ",
      "&&& ",
      "<<<",
      ">>>",
      "^^^",
      "~~~",
      "!= ",
      "== "
    ],
    "extensions": [
      "qs"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "QCL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "qcl"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "QML": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "qml"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "R": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "r"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Rakefile": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [],
    "filenames": [
      "rake",
      "rakefile"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "=begin",
        "=end"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Razor": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cshtml"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ],
      [
        "@*",
        "*@"
      ]
    ],
    "quotes": []
  },
  "ReStructuredText": {
    "complexitychecks": [],
    "extensions": [
      "rst"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Report Definition Language": {
    "complexitychecks": [],
    "extensions": [
      "rdl"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Robot Framework": {
    "complexitychecks": [],
    "extensions": [
      "robot"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Ruby": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "rb"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "=begin",
        "=end"
      ]
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "ruby"
    ]
  },
  "Ruby HTML": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "rhtml"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Rust": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "rs"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "SAS": {
    "complexitychecks": [
      "do",
      "%do",
      "if",
      "%if",
      "else",
      "%else",
      "case",
      "or",
      "and",
      "^=",
      "¬=",
      "~=",
      "ne",
      "eq"
    ],
    "extensions": [
      "sas"
    ],
    "line_comment": [
      "*"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "SKILL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "il"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "SPDX": {
    "complexitychecks": [],
    "extensions": [
      "spdx"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "SQL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "sql"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "SRecode Template": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "srt"
    ],
    "line_comment": [
      ";;"
    ],
    "multi_line": [],
    "quotes": []
  },
  "SVG": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "svg"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Sass": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "sass",
      "scss"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Scala": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "sc",
      "scala"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Scheme": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "scm",
      "ss"
    ],
    "line_comment": [
      ";"
    ],
    "multi_line": [
      [
        "#|",
        "|#"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [],
    "shebangs": [
      "racket"
    ]
  },
  "Scons": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "csig",
      "sconstruct",
      "sconscript"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      },
      {
        "end": "'''",
        "start": "'''"
      }
    ]
  },
  "Shell": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "sh"
    ],
    "filenames": [
      ".tcshrc"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "sh"
    ]
  },
  "Smarty Template": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== ",
      "include "
    ],
    "extensions": [
      "tpl"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "{*",
        "*}"
      ]
    ],
    "quotes": []
  },
  "Softbridge Basic": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "elseif ",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "sbl"
    ],
    "line_comment": [
      "'"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "Specman e": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "e"
    ],
    "line_comment": [
      "--",
      "//"
    ],
    "multi_line": [
      [
        "'>",
        "<'"
      ]
    ],
    "quotes": []
  },
  "Spice Netlist": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ckt"
    ],
    "line_comment": [
      "*"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Standard ML (SML)": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "sml"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Stata": {
    "complexitychecks": [
      "foreach",
      "forvalues",
      "if",
      "else",
      "while",
      "switch",
      "|",
      "&",
      "!=",
      "=="
    ],
    "extensions": [
      "do",
      "ado"
    ],
    "line_comment": [
      "//",
      "*"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "\"'",
        "start": "`\""
      }
    ]
  },
  "Stylus": {
    "complexitychecks": [
      "for ",
      "if ",
      "unless ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "styl"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Swift": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "swift"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Swig": {
    "complexitychecks": [],
    "extensions": [
      "i"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "SystemVerilog": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "| ",
      "& ",
      "!= ",
      "!== ",
      "== ",
      "foreach ",
      "foreach(",
      "case ",
      "case(",
      "casex ",
      "casex(",
      "casez ",
      "casez(",
      "casexz ",
      "casexz(",
      "fork ",
      " ? ",
      "inside",
      "with",
      "event "
    ],
    "extensions": [
      "sv",
      "svh"
    ],
    "keywords": [
      "endmodule",
      "posedge",
      "edge",
      "always",
      "wire"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Systemd": {
    "complexitychecks": [],
    "extensions": [
      "automount",
      "device",
      "link",
      "mount",
      "path",
      "scope",
      "service",
      "slice",
      "socket",
      "swap",
      "target",
      "timer"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "TCL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "tcl"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "tcl"
    ]
  },
  "TOML": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "toml"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "\\\"\\\"\\\"",
        "start": "\\\"\\\"\\\""
      },
      {
        "end": "'''",
        "start": "'''"
      }
    ]
  },
  "TaskPaper": {
    "complexitychecks": [],
    "extensions": [
      "taskpaper"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "TeX": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "tex",
      "sty"
    ],
    "line_comment": [
      "%"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Thrift": {
    "complexitychecks": [],
    "extensions": [
      "thrift"
    ],
    "line_comment": [
      "//",
      "#"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Twig Template": {
    "complexitychecks": [
      "{% for ",
      "{% if ",
      "{% else ",
      "{% elseif "
    ],
    "extensions": [
      "twig"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "TypeScript": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "| ",
      "|| ",
      "& ",
      "&& ",
      "!= ",
      "!== ",
      "== ",
      "=== ",
      "foreach(",
      "case ",
      "case(",
      "casex ",
      "casex(",
      "casez ",
      "casez(",
      "casexz ",
      "casexz(",
      "fork",
      "?",
      ":",
      "inside",
      "with"
    ],
    "extensions": [
      "ts",
      "tsx"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "TypeScript Typings": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "| ",
      "|| ",
      "& ",
      "&& ",
      "!= ",
      "!== ",
      "== ",
      "=== ",
      "foreach(",
      "case ",
      "case(",
      "casex ",
      "casex(",
      "casez ",
      "casez(",
      "casexz ",
      "casexz(",
      "fork",
      "?",
      ":",
      "inside",
      "with"
    ],
    "extensions": [
      "d.ts"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Unreal Script": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "uc",
      "uci",
      "upkg"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Ur/Web": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "ur",
      "urs"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Ur/Web Project": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "urp"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "V": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "v"
    ],
    "keywords": [
      "break",
      "const ",
      "continue",
      "defer",
      "else ",
      "enum",
      "fn ",
      "goto",
      "import ",
      "in ",
      "interface",
      "match",
      "mut",
      "println",
      "pub",
      "return",
      "struct ",
      "type "
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "`",
        "start": "`"
      }
    ]
  },
  "VHDL": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vhd",
      "vhdl"
    ],
    "keywords": [
      "abs",
      "access",
      "after",
      "alias",
      "all",
      "and",
      "architecture",
      "array",
      "assert",
      "attribute",
      "begin",
      "block",
      "body",
      "buffer",
      "bus",
      "case",
      "component",
      "configuration",
      "constant",
      "disconnect",
      "downto",
      "else",
      "elsif",
      "end",
      "entity",
      "exit",
      "file",
      "for",
      "function",
      "generate",
      "generic",
      "group",
      "guarded",
      "if",
      "impure",
      "in",
      "inertial",
      "inout",
      "is",
      "label",
      "library",
      "linkage",
      "literal",
      "loop",
      "map",
      "mod",
      "nand",
      "new",
      "next",
      "nor",
      "not",
      "null",
      "of",
      "on",
      "open",
      "or",
      "others",
      "out",
      "package",
      "port",
      "postponed",
      "procedure",
      "process",
      "pure",
      "range",
      "record",
      "register",
      "reject",
      "rem",
      "report",
      "return",
      "rol",
      "ror",
      "select",
      "severity",
      "shared",
      "signal",
      "sla",
      "sll",
      "sra",
      "srl",
      "subtype",
      "then",
      "to",
      "transport",
      "type",
      "unaffected",
      "units",
      "until",
      "use",
      "variable",
      "wait",
      "when",
      "while",
      "with",
      "xnor",
      "xor"
    ],
    "line_comment": [
      "--"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Vala": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vala"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Varnish Configuration": {
    "complexitychecks": [],
    "extensions": [
      "vcl"
    ],
    "line_comment": [
      "#",
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": []
  },
  "Verilog": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vg",
      "vh",
      "v"
    ],
    "keywords": [
      "module",
      "endmodule",
      "timescale",
      "input",
      "output",
      "reg",
      "wire",
      "posedge",
      "negedge",
      "always",
      "begin",
      "switch",
      "case",
      "end",
      "endcase",
      "else",
      "localparam",
      "initial",
      "signed",
      "assign",
      "generate",
      "genvar"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Verilog Args File": {
    "complexitychecks": [],
    "extensions": [
      "irunargs",
      "xrunargs"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Vertex Shader File": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vsh"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Vim Script": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vim"
    ],
    "line_comment": [
      "\\\""
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ]
  },
  "Visual Basic": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "elseif ",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vb"
    ],
    "line_comment": [
      "'"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "Visual Basic for Applications": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "elseif ",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "cls"
    ],
    "line_comment": [
      "'"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      }
    ]
  },
  "Vue": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "vue"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Web Services Description Language": {
    "extensions": [
      "wsdl"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Wolfram": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "nb",
      "wl"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "(*",
        "*)"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Wren": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "wren"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "nestedmultiline": true,
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "XAML": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "xaml"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Xcode Config": {
    "complexitychecks": [],
    "extensions": [
      "xcconfig"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [],
    "quotes": []
  },
  "XML": {
    "extensions": [
      "xml"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "XML Schema": {
    "complexitychecks": [],
    "extensions": [
      "xsd"
    ],
    "line_comment": [],
    "multi_line": [],
    "quotes": []
  },
  "Xtend": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "xtend"
    ],
    "line_comment": [
      "//"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "Yarn": {
    "complexitychecks": [
      "<<if ",
      "<<elseif ",
      "<<else ",
      " eq ",
      " == ",
      " neq ",
      " ! ",
      " gt ",
      " > ",
      " lt ",
      " < ",
      " lte ",
      " <= ",
      " gte ",
      " >= ",
      " xor ",
      " ^ ",
      " and ",
      " && ",
      " || ",
      " or "
    ],
    "extensions": [
      "yarn"
    ],
    "line_comment": [
    ],
    "quotes": [
    ]
  },
  "YAML": {
    "complexitychecks": [],
    "extensions": [
      "yaml",
      "yml"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "Zig": {
    "complexitychecks": [
      "while ",
      "for ",
      "if ",
      "else ",
      "defer ",
      "switch",
      "||",
      "&&",
      "!=",
      "=="
    ],
    "extensions": [
      "zig"
    ],
    "line_comment": [
      "//"
    ],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "\n",
        "start": "\\\\"
      }
    ]
  },
  "Zsh": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "|| ",
      "&& ",
      "!= ",
      "== "
    ],
    "extensions": [
      "zsh",
      "zshenv",
      "zlogin",
      "zlogout",
      "zprofile",
      "zshrc"
    ],
    "filenames": [
      ".zshenv",
      ".zlogin",
      ".zlogout",
      ".zprofile",
      ".zshrc"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [
      {
        "end": "\\\"",
        "start": "\\\""
      },
      {
        "end": "'",
        "start": "'"
      }
    ],
    "shebangs": [
      "zsh"
    ]
  },
  "gitignore": {
    "complexitychecks": [],
    "extensions": [],
    "filenames": [
      ".gitignore"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "ignore": {
    "complexitychecks": [],
    "extensions": [],
    "filenames": [
      ".ignore"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "m4": {
    "complexitychecks": [],
    "extensions": [
      "m4"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": []
  },
  "nuspec": {
    "extensions": [
      "nuspec"
    ],
    "line_comment": [],
    "multi_line": [
      [
        "<!--",
        "-->"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "sed": {
    "complexitychecks": [
      "for ",
      "for(",
      "if ",
      "if(",
      "switch ",
      "while ",
      "else ",
      "and ",
      "or ",
      "not ",
      "in "
    ],
    "extensions": [
      "sed"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [],
    "quotes": [],
    "shebangs": [
      "sed"
    ]
  },
  "Sieve": {
    "complexitychecks": [
      "if",
      "if ",
      "elsif",
      "elsif ",
      "allof",
      "allof ",
      "anyof",
      "anyof ",
      "allof(",
      "anyof("
    ],
    "extensions": [
      "sieve"
    ],
    "line_comment": [
      "#"
    ],
    "multi_line": [
      [
        "/*",
        "*/"
      ]
    ],
    "quotes": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  }
}
